import { Resolver, Query, Args, Mutation } from '@nestjs/graphql';
import { UseGuards } from '@nestjs/common';
import { {{pascalCase name}}Service } from './{{kebabCase name}}.service';
import { GqlAuthGuard } from '@/common/guards/auth.guard';
import { {{pascalCase name}}InputDto } from './dto/{{kebabCase name}}-input.dto';
import { CurrentUserId } from '@/common/decorators/current-user.decorator';
import { {{pascalCase name}}Result, {{pascalCase name}}Results } from './dto/{{kebabCase name}}-result';
import {
  CREATE_{{constantCase name}}_FAILED,
  {{constantCase name}}_ALREADY_EXISTS,
  {{constantCase name}}_NOT_EXISTS,
  SUCCESS,
} from '@/common/const/code';
import { PageInput } from '@/common/dto/page-input.dto';
import { Result } from '@/common/dto/result.dto';
import { CodeMsg } from '@/common/const/message';
import { Entity } from '@/common/decorators/entity.decorator';
import { EntityGuard } from '@/common/guards/entity.guard';

@Entity('user')
@UseGuards(GqlAuthGuard, EntityGuard)
@Resolver()
export class {{pascalCase name}}Resolver {
  constructor(private readonly {{kebabCase name}}Service: {{pascalCase name}}Service) {}

  @Mutation(() => {{pascalCase name}}Result, { description: 'Create {{kebabCase name}}' })
  async createOrUpdate{{pascalCase name}}(
    @CurrentUserId('userId') userId: string,
    @Args('dto') dto: {{pascalCase name}}InputDto,
    @Args('id', { nullable: true }) id?: string,
  ): Promise<{{pascalCase name}}Result> {
    console.log('createOrUpdate{{pascalCase name}}', userId, id);
    if (!id) {
      const {{kebabCase name}} = await this.{{kebabCase name}}Service.create({
        ...dto,
        createdBy: userId,
      });
      return {{kebabCase name}}
        ? { code: SUCCESS, message: CodeMsg(SUCCESS), data: {{kebabCase name}} }
        : {
            code: CREATE_{{constantCase name}}_FAILED,
            message: CodeMsg(CREATE_{{constantCase name}}_FAILED),
          };
    } else {
      const {{kebabCase name}} = await this.{{kebabCase name}}Service.update(id, {
        ...dto,
        updatedBy: userId,
      });
      return {{kebabCase name}}
        ? { code: SUCCESS, message: CodeMsg(SUCCESS), data: {{kebabCase name}} }
        : {
            code: {{constantCase name}}_NOT_EXISTS,
            message: CodeMsg({{constantCase name}}_NOT_EXISTS),
          };
    }
  }

  @Query(() => {{pascalCase name}}Result, { description: 'Find {{kebabCase name}} by id' })
  async get{{pascalCase name}}Info(@Args('id') id: string): Promise<{{pascalCase name}}Result> {
    const {{kebabCase name}} = await this.{{kebabCase name}}Service.findOne(id);
    return {{kebabCase name}}
      ? { code: SUCCESS, message: CodeMsg(SUCCESS), data: {{kebabCase name}} }
      : { code: {{constantCase name}}_NOT_EXISTS, message: CodeMsg({{constantCase name}}_NOT_EXISTS) };
  }

  @Query(() => {{pascalCase name}}Results, { description: 'Find {{kebabCase name}}s' })
  async get{{pascalCase name}}s(
    @CurrentUserId('userId') userId: string,
    @Args('page') pageInput: PageInput,
    @Args('name', { nullable: true }) name?: string,
  ): Promise<{{pascalCase name}}Results> {
    const { page, pageSize } = pageInput;
    const [{{kebabCase name}}s, total] = await this.{{kebabCase name}}Service.findAll(
      page,
      pageSize,
      userId,
      name,
    );
    return {
      code: SUCCESS,
      message: CodeMsg(SUCCESS),
      data: {{kebabCase name}}s,
      page: {
        page,
        pageSize,
        total,
      },
    };
  }

  @Mutation(() => Result, { description: 'Delete organization by id' })
  async delete{{pascalCase name}}(
    @CurrentUserId('userId') userId: string,
    @Args('id') id: string,
  ): Promise<Result> {
    console.log('delete{{pascalCase name}}', id, userId);
    const res = await this.{{kebabCase name}}Service.remove(id, userId);
    return res
      ? { code: SUCCESS, message: CodeMsg(SUCCESS) }
      : {
          code: {{constantCase name}}_NOT_EXISTS,
          message: CodeMsg({{constantCase name}}_NOT_EXISTS),
        };
  }
}
