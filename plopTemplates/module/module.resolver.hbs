import { Resolver, Query, Args, Mutation } from '@nestjs/graphql';
import { UseGuards } from '@nestjs/common';
import { {{pascalCase name}}Service } from './{{kebabCase name}}.service';
import { GqlAuthGuard } from '@/common/guards/auth.guard';
import { Update{{pascalCase name}}Dto } from './dto/update-{{kebabCase name}}.dto';
import { CurrentUserId } from '@/common/decorators/current-user.decorator';
import { {{pascalCase name}}Result, {{pascalCase name}}Results } from './dto/{{kebabCase name}}-result';
import {
  CREATE_{{constantCase name}}_FAILED,
  {{constantCase name}}_ALREADY_EXISTS,
  {{constantCase name}}_NOT_EXISTS,
  SUCCESS,
} from '@/common/const/code';
import { PageInput } from '@/common/dto/page-input.dto';
import { Result } from '@/common/dto/result.dto';

@UseGuards(GqlAuthGuard)
@Resolver()
export class {{pascalCase name}}Resolver {
  constructor(private readonly {{kebabCase name}}Service: {{pascalCase name}}Service) {}

  @Mutation(() => Result, { description: 'Create {{kebabCase name}}' })
  async create{{pascalCase name}}(
    @Args('account') account: string,
    @Args('password') password: string,
  ): Promise<Result> {
    const {{kebabCase name}} = await this.{{kebabCase name}}Service.findOneByAccount(account);
    if ({{kebabCase name}}) {
      return {
        code: {{constantCase name}}_ALREADY_EXISTS,
        message: '{{pascalCase name}} already exists',
      };
    }
    const res = await this.{{kebabCase name}}Service.create({ account, password });
    return res ? { code: SUCCESS } : { code: CREATE_{{constantCase name}}_FAILED };
  }

  @Query(() => {{pascalCase name}}Result, { description: 'Find {{kebabCase name}} by id' })
  async get{{pascalCase name}}Info(
    @CurrentUserId('id') id: string,
  ): Promise<{{pascalCase name}}Result> {
    const {{kebabCase name}} = await this.{{kebabCase name}}Service.findOne(id);
    return {{kebabCase name}}
      ? { code: SUCCESS, data: {{kebabCase name}} }
      : { code: {{constantCase name}}_NOT_EXISTS, message: '{{pascalCase name}} not exists' };
  }

  @Mutation(() => {{pascalCase name}}Result, { description: 'Update {{kebabCase name}} by id' })
  async update{{pascalCase name}}Info(
    @CurrentUserId('id') id: string,
    @Args('params') params: Update{{pascalCase name}}Dto,
  ): Promise<{{pascalCase name}}Result> {
    const res = await this.{{kebabCase name}}Service.update(id, params);
    return res
      ? { code: SUCCESS }
      : { code: {{constantCase name}}_NOT_EXISTS, message: '{{pascalCase name}} not exists' };
  }

  @Query(() => {{pascalCase name}}Results, { description: 'Find {{kebabCase name}}s' })
  async get{{pascalCase name}}s(
    @Args('page') pageInput: PageInput,
  ): Promise<{{pascalCase name}}Results> {
    const { page, pageSize } = pageInput;
    const [{{kebabCase name}}s, total] = await this.{{kebabCase name}}Service.findAll({
      page,
      pageSize,
    });
    return {
      code: SUCCESS,
      data: {{kebabCase name}}s,
      page: {
        page,
        pageSize,
        total,
      },
    };
  }
}
