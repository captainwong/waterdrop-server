import { Injectable } from '@nestjs/common';
import { {{pascalCase name}} } from './entities/{{kebabCase name}}.entity';
import { InjectRepository } from '@nestjs/typeorm';
import { DeepPartial, FindOptionsWhere, Like, Repository } from 'typeorm';

@Injectable()
export class {{pascalCase name}}Service {
  constructor(
    @InjectRepository({{pascalCase name}})
    private readonly {{kebabCase name}}Repository: Repository<{{pascalCase name}}>,
  ) {}

  async findAll(
    page: number,
    pageSize: number,
    createdBy: string,
    name?: string,
  ): Promise<[{{pascalCase name}}[], number]> {
    const where: FindOptionsWhere<{{pascalCase name}}> = {
      createdBy: createdBy,
    };
    if (name) {
      where.name = Like(`%${name}%`);
    }
    return this.{{kebabCase name}}Repository.findAndCount({
      where,
      skip: (page - 1) * pageSize,
      take: pageSize,
      order: {
        createdAt: 'DESC',
      },
    });
  }

  async findOne(id: string): Promise<{{pascalCase name}}> {
    return this.{{kebabCase name}}Repository.findOne({ where: { id } });
  }

  async create(dto: DeepPartial<{{pascalCase name}}>): Promise<{{pascalCase name}}> {
    return this.{{kebabCase name}}Repository.save(this.{{kebabCase name}}Repository.create(dto));
  }

  async update(id: string, dto: DeepPartial<{{pascalCase name}}>): Promise<{{pascalCase name}}> {
    const {{kebabCase name}} = await this.findOne(id);
    if (!{{kebabCase name}}) {
      return null;
    }
    Object.assign({{kebabCase name}}, dto);
    return this.{{kebabCase name}}Repository.save({{kebabCase name}});
  }

  async remove(id: string, userId: string): Promise<boolean> {
    console.log('remove', id, userId);
    const res = await this.{{kebabCase name}}Repository.update(id, {
      deletedBy: userId,
    });
    if (res.affected > 0) {
      const res2 = await this.{{kebabCase name}}Repository.softDelete(id);
      return res2.affected > 0;
    }
    return false;
  }
}
